#!/bin/sh

set -e

TMP=/tmp/$$

trap 'set +x; rm -rf $TMP 2>/dev/null 2>&1' 0
trap 'exit 2' 1 2 3 15

mkdir -p $TMP

_LOAD_CONFIGURATION_FILE()
{
    if [ ! -f "${1}" ]; then
        echo "Add ${0}.ini for this lane to run"
        exit 1
    fi

    export INPUT=$(grep -E '^INPUT\s?=' "${1}" | cut -d= -f2-)
    export MAIN_LANGUAGE=$(grep -E '^MAIN_LANGUAGE\s?=' "${1}" | cut -d= -f2-)
    export KEY_ROW=$(grep -E '^KEY_ROW\s?=' "${1}" | cut -d= -f2-)
    export CONFIGURATION=$(grep -E '^CONFIGURATION\s?=' "${1}" | cut -d= -f2-)
    export OUTPUT=$(grep -E '^OUTPUT\s?=' "${1}" | cut -d= -f2-)
}

_CHECK_CONFIGURATION()
{
    if [ -z "$1" ]; then
        echo "Configuration file is missing the 'CONFIGURATION' setting."
        exit 1
    fi

    if [ ! -d "$1/input" ] || [ ! -d "$1/output" ]; then
        echo "The 'CONFIGURATION' setting must point to a directory with both an input and an output directory."
        exit 1
    fi

    if [ ! -f "$1/.type" ]; then
        echo "The 'CONFIGURATION' setting must point to a .type file containing the output type."
        exit 1
    fi

    if $(grep -qi 'swift' "$1/.type"); then
        export OUTPUT_TYPE=swift
    elif $(grep -qi 'android' "$1/.type"); then
        export OUTPUT_TYPE=android
    else
        printf "The output type is not supported, found: "
        cat "$1/.type"
        echo
        exit 1
    fi
}

_UNPACK_CSV()
{
    find "lanes/$CONFIGURATION/input" -type f | xargs -L 1 | while read ITEM; do
        OFFSET=$(cat "$ITEM" | tr -d "[:blank:]")
        LANG=$(basename "$ITEM")
        tail +2 "./$INPUT" | grep -v ^$ | sed 's|\\;|\\\\\\|g' | cut -d\; -f$KEY_ROW,$OFFSET | sed 's|\\\\\\|;|g' | sort > "${TMP}/${LANG}.csv"
    done
}

_GENERATE_XML()
{
    find "lanes/$CONFIGURATION/output" -type f | xargs -L 1 | while read ITEM; do
        LANG=$(basename "$ITEM")
        FILE=$(cat "$ITEM" | tr -d "[:blank:]")
        OUTPUT_DIRECTORY=$(dirname "$FILE")
        mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
        echo '<resources>' > "$FILE"
        cat "${TMP}/${LANG}.csv"| while read LINE; do
            KEY=$(echo "$LINE" | cut -d\; -f1 | tr '[:upper:]' '[:lower:]')
            VALUE=$(echo "$LINE" | cut -d\; -f2- | sed 's|%1|%1$s|g;s|%2|%2$s|g;s|%3|%3$s|g;s|%4|%4$s|g;s|%5|%5$s|g;') # only support for string placeholder, up to 5 for now
            echo "\t<string name=\"$KEY\">$VALUE</string>" >> "$FILE"
        done
        echo '</resources>' >> "$FILE"
    done
}

_GENERATE_STRINGS()
{
    find "lanes/$CONFIGURATION/output" -type f | xargs -L 1 | while read ITEM; do
        LANG=$(basename "$ITEM")
        cat "$ITEM" | grep -v ^$ | while read FILE; do
            OUTPUT_DIRECTORY=$(dirname "$FILE")
            mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
            printf '' > "$FILE"
            cat "${TMP}/${LANG}.csv"| while read LINE; do
                KEY=$(echo "$LINE" | cut -d\; -f1)
                VALUE=$(echo "$LINE" | cut -d\; -f2- | sed 's|\"|\\"|g')
                echo "\"$KEY\" = \"$VALUE\";" >> "$FILE"
            done
        done
    done
}

_GENERATE_STRUCT()
{
    echo '// swiftlint:disable all'
    echo 'import Foundation'
    echo 'struct Translations {'

    cat "${TMP}/${MAIN_LANGUAGE}.csv"| while read ITEM; do
        KEY=$(echo "$ITEM" | cut -d\; -f1)
        VALUE=$(echo "$ITEM" | cut -d\; -f2-)
        PARAMETERS=$(echo $VALUE | grep -o -E '%[0-9]+' | wc -l | tr -d ' \n')

        if [[ $PARAMETERS -eq 0 ]]; then
            echo "\tstatic let ${KEY} = NSLocalizedString(\"${KEY}\", comment: \"\")"
        else
            ARGUMENTS=$(for i in $(seq 1 $PARAMETERS); do printf "p$i: String, _ "; done | rev | cut -c5- | rev)
            REPLACEMENTS=$(for i in $(seq 1 $PARAMETERS); do printf ".replacingOccurrences(of: \"%%%%${i}\", with: p${i})"; done)
            printf "\tstatic func ${KEY}(_ ${ARGUMENTS}) -> String {"
            printf " return NSLocalizedString(\"${KEY}\", comment: \"\")"
            printf "${REPLACEMENTS}"
            echo " }"
        fi
    done

    echo '}'
}

_LOAD_CONFIGURATION_FILE "$1"

_CHECK_CONFIGURATION "lanes/$CONFIGURATION"

_UNPACK_CSV

if [ "$OUTPUT_TYPE" = "swift" ]; then
    _GENERATE_STRINGS

    OUTPUT_DIRECTORY=$(dirname "$OUTPUT")
    mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
    _GENERATE_STRUCT > "$OUTPUT"
fi

if [ "$OUTPUT_TYPE" = "android" ]; then
    _GENERATE_XML
fi